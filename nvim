  " remember to install vim-python for that
let g:python_host_prog = '/usr/local/bin/python'

" ================ Plug commands ==============

call plug#begin('~/.config/nvim/plugged')

Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-complete' }
Plug 'editorconfig/editorconfig-vim'
Plug 'jiangmiao/auto-pairs'
Plug 'Yggdroot/indentLine'
Plug 'vim-airline/vim-airline'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'matze/vim-move'
Plug 'junegunn/vim-easy-align'
Plug 'rhysd/accelerated-jk'

Plug 'google/yapf', { 'rtp': 'plugins/vim', 'for': 'python' }
Plug 'rhysd/vim-clang-format'

Plug 'octol/vim-cpp-enhanced-highlight'

Plug 'NLKNguyen/papercolor-theme'
Plug 'marcopaganini/termschool-vim-theme'
Plug 'michalbachowski/vim-wombat256mod'
Plug 'dracula/vim'
Plug 'jnurmine/Zenburn'
Plug 'morhetz/gruvbox'

Plug 'elixir-lang/vim-elixir'
Plug 'slashmili/alchemist.vim'

call plug#end()

let mapleader = ","
" ================ Plugins ==============

" YouCompleteMe flags
let g:ycm_show_diagnostics_ui = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_global_ycm_extra_conf = '~/.config/nvim/ycm_extra_conf.py'
let g:ycm_python_binary_path = '/usr/bin/python3'
" Goto definition with <leader>gt
map <leader>gt :YcmCompleter GoTo<CR>
nnoremap <leader>r :YcmForceCompileAndDiagnostics<CR>

" ctrlP
let g:ctrlp_prompt_mappings = {
      \ 'AcceptSelection("e")': ['<c-t>'],
      \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
      \ }
" Change the working directory to the directory of the current file
" c => the directory of the current file.
" a => the directory of the current file, unless it is a subdirectory of the cwd
" got it from https://github.com/ctrlpvim/ctrlp.vim
let g:ctrlp_working_path_mode = 'ca'

if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" yapf format
map <C-Y> :call yapf#YAPF()<cr>
imap <C-Y> <c-o>:call yapf#YAPF()<cr>

" Remap TableModeToggle
map ,tm :TableModeToggle<CR>i

" accelerated-jk Plugin
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)
let g:accelerated_jk_acceleration_limit=100

" vim repeat
silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)

" vim-multiple-cursors (like ST)
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<S-n>'
let g:multi_cursor_prev_key='<S-p>'
let g:multi_cursor_skip_key='<S-x>'
let g:multi_cursor_quit_key='<Esc>'

" toggle vim-better-whitespaces on/off
map <leader>o :ToggleWhitespace<CR>

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ClangFormat
map <leader>c :ClangFormat<CR>

" ================ Remap keys ==============

" saving and quitting
map <leader>ww :w<CR>
map <C-s> :w<CR>
map <leader>wq :wq<CR>
map <leader>qq :q!<CR>
imap <leader>j <ESC>

" remap vim navigation keys one key to right
" noremap j <Left>
" noremap k <Down>
" noremap l <Up>
" noremap ; <Right>
" noremap h <NOP>

" alternative command to <ESC>
" inoremap jj <ESC>
" cnoremap jj <ESC>

" prevent cursor to return a char when pressing ESC
inoremap <silent> <Esc> <C-O>:stopinsert<CR>

" remap 0 to ^
noremap 0 ^
" remap - to $
noremap - $

" Remap o and O to insert a line below and above.
inoremap <CR> <CR>x<BS>
nnoremap o ox<BS>
nnoremap O Ox<BS>

" move a hole block of code
" better identation
vnoremap > >gv
vnoremap < <gv


" ================ Indentation ======================

set number
filetype plugin on
syntax on
syntax enable
set nobackup
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab smarttab
set showmatch
"set autoindent cindent
set smartindent
set clipboard=unnamed
set mouse=a
set ruler
set backspace=indent,eol,start

" ================ Misc ==============

" quick reload .vimrc file
autocmd! bufwritepost ~/.config/nvim/init.vim source ~/.config/nvim/init.vim

" auto reload a file
set autoread

" ================ Turn Off Swap Files ==============

set noswapfile
set nobackup
set nowb

" ================ Visual ==============

" vim true colors
"let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" theme
colorscheme wombat256mod
" colorscheme dracula
" colorscheme PaperColor
" colorscheme zenburn
" colorscheme gruvbox
" set background=dark

" close window after YCM suggest completion
let g:ycm_autoclose_preview_window_after_completion=1

" highlight while searching for a pattern
set hlsearch
map <Leader>h :set hls!<CR>

set scrolloff=10        " 10 lines above/below cursor when scrolling
set title               " show filename in status bar
set cursorline          " highlights the current line

" highlight current line
hi CursorLine term=bold cterm=bold guibg=Grey40


" ================ Move between tabs ==============

" if inside VimR - remap C-tab and C-S-tab to navigate between tabs
if has ("gui_vimr")
  " remap ctrl + tab and ctrl + shift + tab to move between tabs
  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprevious<CR>
endif

" tab navigation - vim on terminal
map <Leader>n <esc>:tabprevious<CR>
map <C-n> <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>
map <C-m> <esc>:tabnext<CR>
map <C-t> <esc>:tabnew<CR>

if has('nvim')
  " Hack to get C-h working in NeoVim
  nmap <BS> <C-W>h
endif

" move between splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <S-J> <C-W><C-J>
nnoremap <S-K> <C-W><C-K>
nnoremap <S-L> <C-W><C-L>
nnoremap <S-H> <C-W><C-H>
